security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
                trusted_parameter_name: _trusted
            login_throttling:
                max_attempts: 5
                interval: '5 minutes'
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\LoginFormAuthenticator
            custom_authenticators:
                - App\Security\LoginFormAuthenticator
                - App\Security\GoogleAuthenticator
            logout:
                path: app_security_logout
                # where to redirect after logout
                target: app_home
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                name: __SAP-REMEMBER
        secured_area:
            form_login:
                enable_csrf: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_SONATA_ADMIN }
        - { path: ^/logout, role: PUBLIC_ACCESS }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        # - { path: ^/profile, roles: ROLE_USER }
    access_decision_manager:
        strategy: unanimous
    role_hierarchy:
        ROLE_SONATA_ADMIN:
            - ROLE_ADMIN_USER_LIST
            - ROLE_ADMIN_USER_EDIT
            - ROLE_ADMIN_USER_DELETE
            - ROLE_ADMIN_USER_EXPORT

            - ROLE_ADMIN_CITY_LIST

            - ROLE_ADMIN_DIFFICULTY_LIST
            - ROLE_ADMIN_DIFFICULTY_EXPORT

            - ROLE_ADMIN_COST_LIST
            - ROLE_ADMIN_COST_EXPORT

            - ROLE_ADMIN_COOKING_TYPE_LIST
            - ROLE_ADMIN_COOKING_TYPE_EXPORT

            - ROLE_ADMIN_UNIT_LIST
            - ROLE_ADMIN_UNIT_CREATE
            - ROLE_ADMIN_UNIT_EDIT
            - ROLE_ADMIN_UNIT_DELETE
            - ROLE_ADMIN_UNIT_EXPORT

            - ROLE_ADMIN_CATEGORY_LIST
            - ROLE_ADMIN_CATEGORY_CREATE
            - ROLE_ADMIN_CATEGORY_EDIT
            - ROLE_ADMIN_CATEGORY_DELETE
            - ROLE_ADMIN_CATEGORY_EXPORT

            - ROLE_ADMIN_SUBCATEGORY_LIST
            - ROLE_ADMIN_SUBCATEGORY_CREATE
            - ROLE_ADMIN_SUBCATEGORY_EDIT
            - ROLE_ADMIN_SUBCATEGORY_DELETE
            - ROLE_ADMIN_SUBCATEGORY_EXPORT

            - ROLE_ADMIN_INGREDIENT_LIST
            - ROLE_ADMIN_INGREDIENT_CREATE
            - ROLE_ADMIN_INGREDIENT_EDIT
            - ROLE_ADMIN_INGREDIENT_DELETE
            - ROLE_ADMIN_INGREDIENT_EXPORT

            - ROLE_ADMIN_RECIPE_LIST
            - ROLE_ADMIN_RECIPE_CREATE
            - ROLE_ADMIN_RECIPE_EDIT
            - ROLE_ADMIN_RECIPE_DELETE
            - ROLE_ADMIN_RECIPE_EXPORT

            - ROLE_ADMIN_RECIPES_INGREDIENTS_CREATE
            - ROLE_ADMIN_RECIPES_INGREDIENTS_EDIT
            - ROLE_ADMIN_RECIPES_INGREDIENTS_DELETE

            - ROLE_ADMIN_RECIPE_STEP_CREATE
            - ROLE_ADMIN_RECIPE_STEP_EDIT
            - ROLE_ADMIN_RECIPE_STEP_DELETE

            - ROLE_ADMIN_RECIPE_IMAGE_CREATE
            - ROLE_ADMIN_RECIPE_IMAGE_EDIT
            - ROLE_ADMIN_RECIPE_IMAGE_DELETE

            - ROLE_ADMIN_RECIPES_COMMENTS_LIST
            - ROLE_ADMIN_RECIPES_COMMENTS_EDIT
            - ROLE_ADMIN_RECIPES_COMMENTS_DELETE

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
